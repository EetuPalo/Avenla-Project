<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionResult_AddToGroup" xml:space="preserve">
    <value>Add the user to a group first.</value>
  </data>
  <data name="ActionResult_AttendFail" xml:space="preserve">
    <value>Could not attend the lesson!</value>
  </data>
  <data name="ActionResult_AttendSuccess" xml:space="preserve">
    <value>Successfully attended the lesson</value>
  </data>
  <data name="ActionResult_CourseCompleteFail" xml:space="preserve">
    <value>Could not mark the course as completed.</value>
  </data>
  <data name="ActionResult_CourseCompleteSuccess" xml:space="preserve">
    <value>You have completed the course.</value>
  </data>
  <data name="ActionResult_CourseJoinFail" xml:space="preserve">
    <value>Could not join the course!</value>
  </data>
  <data name="ActionResult_CourseJoinSuccess" xml:space="preserve">
    <value>Successfully joined the course</value>
  </data>
  <data name="ActionResult_EditFail" xml:space="preserve">
    <value>User edit failed!</value>
  </data>
  <data name="ActionResult_EditSuccess" xml:space="preserve">
    <value>User edited!</value>
  </data>
  <data name="ActionResult_Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ActionResult_GeneralException" xml:space="preserve">
    <value>An exception occured!</value>
  </data>
  <data name="ActionResult_GeneralFail" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="ActionResult_GoalDeleted" xml:space="preserve">
    <value>Goals deleted successfully!</value>
  </data>
  <data name="ActionResult_GoalDeletedFail" xml:space="preserve">
    <value>An exception occured when deleting goals!</value>
  </data>
  <data name="ActionResult_GoalEdited" xml:space="preserve">
    <value>Goals edited successfully!</value>
  </data>
  <data name="ActionResult_GoalSet" xml:space="preserve">
    <value>New goals set!</value>
  </data>
  <data name="ActionResult_GoalSetAddUser" xml:space="preserve">
    <value>Goals set! Now you can add users to the group.</value>
  </data>
  <data name="ActionResult_GradeFail" xml:space="preserve">
    <value>Grading failed!</value>
  </data>
  <data name="ActionResult_GradeSuccess" xml:space="preserve">
    <value>Grading successful!</value>
  </data>
  <data name="ActionResult_GroupCreated" xml:space="preserve">
    <value>Group created! Next you need to set up the group goals.</value>
  </data>
  <data name="ActionResult_GroupCreatedNoGoal" xml:space="preserve">
    <value>Group created successfully!</value>
  </data>
  <data name="ActionResult_RoleDeleteException" xml:space="preserve">
    <value>An exception occured while deleting role. Check the list!</value>
  </data>
  <data name="ActionResult_RoleDeleteFail" xml:space="preserve">
    <value>No role deleted. This is likely an error.</value>
  </data>
  <data name="ActionResult_RoleDeleteSuccess" xml:space="preserve">
    <value>Role deleted successfully!</value>
  </data>
  <data name="ActionResult_RoleSuccessful" xml:space="preserve">
    <value>Role created successfully!</value>
  </data>
  <data name="ActionResult_UserCreated" xml:space="preserve">
    <value>User has been created!</value>
  </data>
  <data name="ActionResult_UserDeleted" xml:space="preserve">
    <value>User has been deleted!</value>
  </data>
  <data name="ActionResult_UserTaken" xml:space="preserve">
    <value>Username taken!</value>
  </data>
  <data name="ActionWarning_MultipleSkillSelect" xml:space="preserve">
    <value>A skill has been selected multiple times. One of the selections may have been overridden.</value>
  </data>
  <data name="CreateStatus_Error" xml:space="preserve">
    <value>An error occured but the account may have still been created. Check the account list!</value>
  </data>
  <data name="CreateStatus_Success1" xml:space="preserve">
    <value>User </value>
  </data>
  <data name="CreateStatus_Success2" xml:space="preserve">
    <value>created successfully!</value>
  </data>
  <data name="CreateStatus_UserTaken" xml:space="preserve">
    <value>Username taken!</value>
  </data>
  <data name="Stats_Avg_NoData" xml:space="preserve">
    <value>NO_DATA</value>
  </data>
  <data name="ViewBag_InvalidDate" xml:space="preserve">
    <value>INVALID_DATE</value>
  </data>
</root>