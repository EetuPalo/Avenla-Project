@model IEnumerable<Login_System.ViewModels.DateListVM>
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@{
    ViewData["Title"] = "ListByDate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
    <head>
        <script src="~/js/Chart.bundle.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    </head>
<h1>@TempData["UserName"]</h1>
<h2>@TempData["ActionResult"]</h2>

<p>
    <a asp-action="Create" asp-route-id="@TempData["UserId"]">Create New</a> | 
    <a asp-action="Index" asp-controller="AppUsers">Back to List</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                Date
            </th>
            <th>
                Evaluation Type
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                @if (item.AdminEval == "Admin Evaluation")
                {
                    <td>
                        <span class="text-danger">@Html.DisplayFor(modelItem => item.AdminEval)</span>
                    </td>
                }
                else
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.AdminEval)
                    </td>
                }
                <td>
                    <a asp-action="SkillList" asp-route-name="@item.TempDate" asp-route-id="@item.Id">View</a> |
                </td>
            </tr>
        }
    </tbody>
</table>
<canvas id="myChart" width="1000" height="500"></canvas>

<script>
var ctx = document.getElementById('myChart');
var myChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: [1,2,3,4,5,6,7,8,9,10,11,12,13,14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
        //labels: [@Html.Raw(Json.Serialize(ViewBag.Dates))],
        //labels: [@Html.Raw(ViewBag.names)],
        datasets: [
            @for(int i = 0; i < ViewBag.DataPoint.Length;i++)
            {
                string deta = JsonConvert.SerializeObject(ViewBag.DataPoint[i]);
                deta = deta.Replace("\"x\"", "x");
                deta = deta.Replace("\"y\"", "y");
                var random = new Random();
                var color = String.Format("#{0:X6}", random.Next(0x1000000));
                <text>
                {
                label: @Html.Raw(JsonConvert.SerializeObject(ViewBag.names[i]))+@Html.Raw(Json.Serialize(ViewBag.Dates[i])),
                data: [@Html.Raw(deta)],
                backgroundColor: "@color",
                borderColor: "@color",
                borderWidth: 5,
                tension: 0,
                showLine: true
                },
        </text>
            }
            {
            //empty dataset cause too lazy to implement no comma in the for loop for the last element
        }
        ]
        
    },
    options: {
        label: {
            display: true
        },
        legend: {
            display: false
        }        
    }
});
    lineChartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            xAxes: [{
                    type: 'time',
                    time: {
                        parser: 'YYYY-MM-DDTHH:mm:ss',
                        unit: 'day'
                    },
                    ticks: {
                        source: 'data'
                    }
                }]
        }
    }
console.log(myChart)
</script>
