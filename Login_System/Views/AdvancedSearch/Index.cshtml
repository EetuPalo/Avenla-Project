@model Login_System.ViewModels.AdvancedSearchVM

@{
    ViewData["Title"] = "AdvancedSearch";
 
    
}

<h1>@Resources.Resources.Advanced_Search</h1>
<nav class="breadcrumb_nav" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Dashboard" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">@Resources.Resources.Advanced_Search</li>
    </ol>
</nav>
<hr />
<form asp-controller="AdvancedSearch" asp-action="Index">
    <div class="card">
        <div class="card-header"> <h5> @Resources.Resources.Advanced_Search </h5> </div>
        <div class="card-body">
            <div class="row">
                    <div class="col-sm">
                        <label asp-for="Company">@Resources.Resources.Company</label>
                        @Html.DropDownListFor(x => x.Company, new SelectList(Model.CompanyList, "Value", "Text"), Resources.Resources.Company, new { @class = "js-examp le-basic-multiple form-control col-sm" })
                    </div>
                
                <div class="col-sm">
                    <label asp-for="Certificate">@Resources.Resources.UCertificates_Index_Cert</label>
                    @Html.DropDownListFor(x => x.Certificate, new SelectList(Model.CertificateList, "Value", "Text"), Resources.Resources.UCertificates_Create_DropDownDefault, new { @class = "form-control col-sm" })
                </div>
                <div class="col-sm">
                    <label asp-for="Groups">@Resources.Groups.Index_Group</label>
                    @Html.DropDownListFor(x => x.Groups, new SelectList(Model.GroupList, "Value", "Text"), Resources.Resources.Group_Dropdownlist, new { @class = "form-control col-sm" })
                </div>
                <div class="col-sm"><br /><button class="btn btn-info" type="submit"><i class="fas fa-search fa-fw"> </i> Search</button></div>
                <div class="col-sm"></div>
            </div>
            <br />
            <br />
            <hr />
            <div id="accordion">
                <div id="headingOne" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" onclick="changeIcon()">
                    <label>Skills</label> &nbsp;<i id="caret" class="fas fa-angle-up"></i>
                </div>
         
                <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                    <div class="card-body">
                        <div class="buttons col-sm-3 float-right"><button type="button" onclick="addSkillFilter()"  class="btn btn-info"><i class="fas fa-plus fa-fw"> </i> @Resources.Resources.Advanced_Search_AddSkill</button></div>
                        
                            <div id="skillFilters">

                                <div class="row" id="skillfilter">
                                    <div class="col-sm-4" id="skill">

                                        @Html.DropDownListFor(x => x.Skill, new SelectList(Model.SkillList, "Value", "Text"), Resources.Skills.Index_Skill, new { @class = "skillName form-control col-sm", @onchange = "modifyHeading()" })
                                        <br />
                                    </div>
                                    <br />
                                    <div class="col-sm-3">
                                        <input class="min form-control" id="min" type="number" name="Min" placeholder="Min value: " onchange="modifyHeading()" value="@TempData["inValue"]" min="0" max="5">
                                    </div>
                                    <div class="col-sm-3">
                                        <input class="max form-control" id="max" type="number" name="Max" placeholder="Max value: " onchange="modifyHeading()" value="@TempData["MaxValue"]" min="0" max="5">
                                    </div>
                                    <div class="buttons col-sm-2"><button type="button" onclick="clearSelection()" class="btn btn-danger"> Clear</button></div>

                                </div>
                            </div>
                      
                    </div>
                </div>

                <br />


                <!--Results-->
                <table class="table">
                    <thead>
                        <tr>
                            <th>@Resources.Resources.FirstName</th>
                            <th>@Resources.Resources.LastName</th>
                            <th class="disable_arrow">@Resources.Resources.Email</th>
                            <th class="disable_arrow">@Resources.Resources.Phone</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Users.Count() != 0)
                        {
                            @foreach (var user in Model.Users)
                            {
                                @if (Model.adminCompanyIds.Any(x=> user.Item2.Any(y=> x==y))|| User.IsInRole("Superadmin"))
                                {
                                    <tr>
                                        <td>@user.Item1.FirstName</td>
                                        <td>@user.Item1.LastName</td>
                                        <td>@user.Item1.Email</td>
                                        <td>@user.Item1.PhoneNumber</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td>@user.Item1.Id</td>
                                        <td>@user.Item1.</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
                <div>
                </div>
            </div>
        </div>
    </div>
</form>
<div class="test">

</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript" language="javascript">

    //get the dropdown menu to multiply it in javascript
    var skillDropClone = document.getElementById("skillfilter")

    function addSkillFilter() {
        //has the cloned node
        var completenode = skillDropClone.cloneNode(true);
        //container div of skillfilters
        var container = document.getElementById("skillFilters");
        //div for new set of searchfunctions
        var aContainer = document.createElement('div');
        aContainer.className = "row";
        aContainer.setAttribute('id', $('#skillFilters').children().length);

        //create button for deletion not included in original filter
        var deleteBtn = document.createElement("button");
        deleteBtn.type = "button";
        deleteBtn.className = "btn btn-danger";
        deleteBtn.innerHTML = "Delete";
        deleteBtn.id = $('#skillFilters').children().length;
        deleteBtn.addEventListener('click', removeIt);
        deleteBtn.addEventListener('click', modifyHeading);
        var buttoncontainer = completenode.querySelectorAll(".buttons")[0];
        buttoncontainer.innerHTML = "";

       //appending button to cloned div and that div to skillfilters div
        buttoncontainer.appendChild(deleteBtn);
        completenode.appendChild(buttoncontainer)
        container.appendChild(completenode);
    }

    function removeIt() {
        console.log("remove called");
        this.parentNode.parentNode.remove();
    }

    function changeIcon() { 
        $('#collapseOne').on('shown.bs.collapse', function () {
            $("#caret").attr('class', 'fas fa-angle-up')
        });

        $('#collapseOne').on('hidden.bs.collapse', function () {
            $("#caret").attr('class', 'fas fa-angle-down')
        });
  
    }

    function modifyHeading() {
        var array = []
        var amountOfFilters = $("#skillFilters").children().length
        for (var i = 0; i < amountOfFilters; i++) {

            var skillname = $(".skillName")[i].value;
            if (skillname == "") { skillname= "no skill"}
            var skillMin = 0;
            ($(".min")[i].value != "") ? skillMin = $(".min")[i].value : skillMin = 0;
            var skillMax = 5;
            ($(".max")[i].value != "") ? skillMax = $(".max")[i].value : skillMax = 5;

            array.push(skillname + " (" + skillMin.toString() + "-" + skillMax.toString()+")");
        }

        var headerArray = array.join(', ');
        document.getElementById("headingOne").children[0].innerText = headerArray;

        }

        function clearSelection() {
            $(".skillName")[0].value = "";
            $("#skillFilters #skillfilter #min")[0].value = "";
            $("#skillFilters #skillfilter #max")[0].value = "";
            modifyHeading();

        }
    </script>

}
